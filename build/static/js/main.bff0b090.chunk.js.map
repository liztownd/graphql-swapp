{"version":3,"sources":["Components/Header.tsx","utils/index.ts","Components/Films.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","title","subtitle","className","GET_PEOPLE","gql","GET_FILMS","Films","newId","getNewId","useQuery","variables","error","data","films","person","filmConnection","name","map","f","id","character","Connection","characters","c","onClick","e","preventDefault","App","searchRef","useRef","current","value","useState","allPeople","setAllPeople","setNewId","console","log","filmsProps","headerProps","type","placeholder","aria-label","aria-describedby","ref","people","index","findIndex","p","search","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","headers","credentials","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.bff0b090.chunk.js","sourcesContent":["import React from 'react'\n\ninterface Props {\n    title: string\n    subtitle: string\n}\n\nconst Header: React.FunctionComponent<Props> = ({ title, subtitle }) => {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">{title}</h1>\n                <p className=\"lead\">{subtitle}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import { gql } from '@apollo/client';\n\nexport const GET_PEOPLE = gql`\nquery{\n\tallPeople{\n    people{\n      name \n      id\n        }\n      }\n    }\n\n`;\n\nexport const GET_FILMS = gql`\nquery Person ($id: string){\n\tperson (id: $id){\n      name \n    \tfilmConnection{\n        films{\n          id\n          title\n          characterConnection{\n            characters{\n              name\n              id\n            }\n          }\n        }\n      }\n        }\n      }\n`;\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_FILMS } from '../utils/index'\n\ninterface Props {\n    newId: string,\n    getNewId: (id: string) => void,\n}\n\nconst Films: React.FunctionComponent<Props> = ({ newId, getNewId }) => {\n    \n    const { error, data } = useQuery(GET_FILMS, \n        {variables: { newId }})\n\n    let films = data.person.filmConnection.films\n\n    return (\n        <div>\n            {error ? <p>Error! Check your spelling!</p> :\n            <div>\n            <h2>Films {data.person.name} appears in:</h2>\n            {/* @ts-ignore */}\n            {films.map((f) => \n            <div>\n            <h3 key={f.id }id={f.id}>{f.title}</h3>\n                <h4>Other characters also in this film:</h4>\n                <p className=\"small\">Click a name to run a search for that character!</p>\n                {f.character.Connection.characters.map((c: {id: string, name: string}) => \n                <p key={c.id} onClick={(e) => [e.preventDefault(), getNewId(c.id)]}>{c.name}</p>, \n                )}\n            </div>\n            )}  \n            </div>   \n            }       \n        </div>\n    )\n}\n\nexport default Films\n","import React, { useRef, useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport './App.css';\nimport Header from './Components/Header'\nimport Films from './Components/Films'\nimport { GET_PEOPLE } from './utils';\n\nfunction App() {\n  const searchRef = useRef<HTMLInputElement>(null);\n  if (searchRef && searchRef.current) { searchRef.current.value = ''; }\n  const [allPeople, setAllPeople] = useState()\n  const [newId, setNewId] = useState('cGVvcGxlOjE=')\n  const { data } = useQuery(GET_PEOPLE)\n\n\n  if (data) {\n    setAllPeople(data)\n    console.log('all people', allPeople)\n  }\n\n  function getNewId(id: string) {\n    setNewId(id)\n  }\n\n\n  function search(e: any, searchRef: string) {\n    e.preventDefault();\n    // @ts-ignore\n    let people = allPeople.people\n    let index = people.findIndex((p: { name: string, id: string }) => p.name === searchRef)\n    let id: string = people[index].id\n    setNewId(id)\n    console.log('newId', newId)\n  }\n\n  interface IHeaderProps {\n    title: string\n    subtitle: string\n  }\n\n  interface IFilmsProps {\n    newId: string\n    getNewId: () => void,\n  }\n\n  const filmsProps = {\n    newId,\n    getNewId,\n  } as IFilmsProps\n\n  const headerProps = {\n    title: \"GraphQL Star Wars App\",\n    subtitle: \"Find all the movies your favorite character appeared in.\"\n  } as IHeaderProps\n\n  return (\n    <div >\n      <Header title={headerProps.title} subtitle={headerProps.subtitle} />\n      <div className=\"container-md\">\n        <h2>Search for a character:</h2>\n        <div className=\"input-group mb-3\">\n          <input type=\"text\" className=\"form-control\"\n            placeholder=\"Search Character\"\n            aria-label=\"search\"\n            aria-describedby=\"search\"\n            ref={searchRef} />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\"\n              type=\"button\"\n              id=\"search\"\n              // @ts-ignore\n              onClick={(e) => search(e, searchRef.current.value)}>Search</button>\n          </div>\n          <Films newId={filmsProps.newId} getNewId={filmsProps.getNewId} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst client = new ApolloClient({\n  uri: 'http://graphql.org/swapi-graphql',\n  cache: new InMemoryCache(),\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"DELETE, POST, GET, OPTIONS\",\n    \"Access-Control-Allow-Headers\":\n      \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\",\n  },\n  credentials: \"omit\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}